{
    "compilerOptions": {
        "target": "ES2019" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
        "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
        "lib": ["es2020"],
        "declaration": true /* Generates corresponding '.d.ts' file. */,

        "outDir": "dist" /* Redirect output structure to the directory. */,
        "removeComments": false /* Do not emit comments to output. */,
        /* Strict Type-Checking Options */
        "strict": true /* Enable all strict type-checking connections. */,
        "noImplicitAny": true /* Raise error on expressions and declarations with an implied 'any' type. */,
        "strictNullChecks": true /* Enable strict null checks. */,
        "strictPropertyInitialization": true /* Enable strict checking of property initialization in classes. */,
        "alwaysStrict": true /* Parse in strict mode and emit "use strict" for each source file. */,

        /* Additional Checks */
        "noUnusedLocals": true /* Report errors on unused locals. */,
        "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
        "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,
        "skipLibCheck": true /* Skip type checking of all declaration files (*.d.ts). */,
        "skipDefaultLibCheck": true,
        // "resolveJsonModule": true /* Allow importing of .JSON modules */,
        "allowJs": false,
        /* ModuleMock Resolution Options */
        "moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
        "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
        "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
        "inlineSourceMap": true /* Emit a single file with source maps instead of having a separate file. */,
        "inlineSources": false /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */,

        /* Experimental Options */
        "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
        "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */
    }
}

// {
//     "include": [
//         "src/**/*",
//     ],
//     "exclude": [
//         "node_modules",
//         "dist"
//     ],
//     "compilerOptions": {
//         "target": "es5",
//         "module": "commonjs",
//         "lib": [
//             "ES6",
//             "DOM",
//             "esnext"
//         ],
//         "moduleResolution": "node",
//         "outDir": "./dist",
//         "declaration": true,
//         "declarationMap": true,
//         "sourceMap": true,
//         "strict": true,
//         "noImplicitReturns": true,
//         "noFallthroughCasesInSwitch": true,
//         "noUnusedLocals": true,
//         "noUnusedParameters": true,
//         "noImplicitOverride": true,
//         "noPropertyAccessFromIndexSignature": true,
//         "forceConsistentCasingInFileNames": true,
//         "jsx": "react",
//         "esModuleInterop": true,
//         "resolveJsonModule": true,
//         "experimentalDecorators": true,
//         "emitDecoratorMetadata": true,
//         "types": [
//             "reflect-metadata",
//             "jest"
//         ],
//         "baseUrl": "./"
//     }
// }