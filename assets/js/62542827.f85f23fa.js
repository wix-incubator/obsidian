"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6607],{5017:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(9575),a=(r(4041),r(2247));const o={sidebar_position:1,title:"mockGraphs"},s=void 0,i={unversionedId:"reference/testKit/mockGraphs",id:"reference/testKit/mockGraphs",title:"mockGraphs",description:"mockGraphs is a function that is used in tests to replace the implementation of graphs with a mock implementation.",source:"@site/docs/reference/testKit/mockGraphs.mdx",sourceDirName:"reference/testKit",slug:"/reference/testKit/mockGraphs",permalink:"/obsidian/docs/reference/testKit/mockGraphs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/testKit/mockGraphs.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"mockGraphs"},sidebar:"reference",previous:{title:"TestKit",permalink:"/obsidian/docs/category/testkit"},next:{title:"mockModel",permalink:"/obsidian/docs/reference/testKit/mockModel"}},p={},l=[{value:"Reference",id:"reference",level:2},{value:"mockGraphs(graphNameToGraph)",id:"mockgraphsgraphnametograph",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Usage",id:"usage",level:2},{value:"Mocking a graph",id:"mocking-a-graph",level:3}],c={toc:l},g="wrapper";function m(e){let{components:t,...r}=e;return(0,a.yg)(g,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"mockGraphs")," ",(0,a.yg)("strong",{parentName:"p"},"is a function that is used in tests to replace the implementation of graphs with a mock implementation.")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"mockGraphs")," function is meant to be used only in tests. It is especially useful when writing integration tests. Unlike in unit tests, where a single unit is tested in isolation, integration tests involve testing multiple ",(0,a.yg)("strong",{parentName:"p"},"concrete")," objects together. By doing so we can validate that the objects work together as expected. Sometimes, we may want to mock some of the dependencies instead of using concretions. For example, we wouldn't want to use a real database in our tests or send real HTTP requests. ",(0,a.yg)("inlineCode",{parentName:"p"},"mockGraphs")," lets us replace certain objects with fakes or mocks."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#reference"},"Reference"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#mockgraphsgraphnametograph"},"mockGraphs(graphNameToGraph)"))))),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("h3",{id:"mockgraphsgraphnametograph"},"mockGraphs(graphNameToGraph)"),(0,a.yg)("p",null,"Replaces the implementation of the given graphs with mock implementations."),(0,a.yg)("h4",{id:"arguments"},"Arguments"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"graphNameToGraph")," - An object mapping graph names to graphs. The graph names must be the same as the names of the graphs being mocked.")),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("h3",{id:"mocking-a-graph"},"Mocking a graph"),(0,a.yg)("p",null,"Lets say we have a graph that looks like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"@Singleton() @Graph()\nclass AppGraph {\n  @Provides()\n  storage(): Storage {\n    return new Storage();\n  }\n}\n")),(0,a.yg)("p",null,"The Storage class is a simple class that persists data to local storage. We don't want to use the real Storage class in our tests as it would make our tests slow and unpredictable. Instead, we'll create a fake implementation of Storage that stores data in memory."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"class FakeStorage extends Storage {\n  private data: Record<string, string> = {};\n\n  override getItem(key: string): string | undefined {\n    return this.data[key];\n  }\n\n  override setItem(key: string, value: string) {\n    this.data[key] = value;\n  }\n}\n")),(0,a.yg)("p",null,"Next, we'll create a graph that provides a fake implementation of Storage."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"@Singleton() @Graph()\nclass AppGraphForIntegrationTests {\n  @Provides()\n  override storage(): Storage {\n    return new FakeStorage();\n  }\n}\n")),(0,a.yg)("p",null,"Finally, we'll mock the AppGraph in our tests by calling ",(0,a.yg)("inlineCode",{parentName:"p"},"mockGraphs")," with an object mapping the name of the graph to the mocked graph."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { Obsidian, mockGraphs } from 'react-obsidian';\n\ndescribe('Mocking graphs', () => {\n  beforeEach(() => {\n    mockGraphs({ AppGraph: AppGraphForIntegrationTests });\n  });\n\n  it('should use the fake storage', () => {\n    const storage = Obsidian.obtain(AppGraph).storage();\n    expect(storage).toBeInstanceOf(FakeStorage);\n  });\n});\n")))}m.isMDXComponent=!0},2247:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>h});var n=r(4041);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=l(r),u=a,h=g["".concat(p,".").concat(u)]||g[u]||m[u]||o;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[g]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);