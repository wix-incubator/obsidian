"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6571],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:5,title:"Classes"},o=void 0,s={unversionedId:"documentation/usage/Classes",id:"documentation/usage/Classes",title:"Classes",description:"Injecting classes",source:"@site/docs/documentation/usage/Classes.mdx",sourceDirName:"documentation/usage",slug:"/documentation/usage/Classes",permalink:"/obsidian/docs/documentation/usage/Classes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/usage/Classes.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Classes"},sidebar:"docs2",previous:{title:"Class components",permalink:"/obsidian/docs/documentation/usage/ClassComponents"},next:{title:"Reactivity",permalink:"/obsidian/docs/documentation/usage/Reactivity"}},c={},l=[{value:"Injecting classes",id:"injecting-classes",level:2},{value:"Lazy injection",id:"lazy-injection",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"injecting-classes"},"Injecting classes"),(0,i.kt)("p",null,"Injecting classes is a two step process. First, annotate the class with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Injectable")," annotation and pass the graph from which dependencies should be resolve. Then, declare the dependencies as class members and annotate them with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject")," annotation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {Injectable, Inject} from 'react-obsidian';\nimport {ApplicationGraph} from './ApplicationGraph';\n\n@Injectable(ApplicationGraph)\nexport class MyClass {\n  @Inject() private httpClient!: HttpClient;\n  \n}\n")),(0,i.kt)("admonition",{title:"Always prefer constructor injection over field injection",type:"important"},(0,i.kt)("p",{parentName:"admonition"},"Constructor injection is the preferred way to inject dependencies. It is more explicit and easier to test. ",(0,i.kt)("strong",{parentName:"p"},"Field injection should only be used when a class is not instantiated by a graph."))),(0,i.kt)("h2",{id:"lazy-injection"},"Lazy injection"),(0,i.kt)("p",null,"Dependencies annotated with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject")," annotation are resolved immediately ",(0,i.kt)("strong",{parentName:"p"},"after")," the constructor is called. If you want to inject a class at a later point in time, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@LazyInject")," annotation instead, and inject the dependencies by manually with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Obsidian.inject()")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {Injectable, LazyInject} from 'react-obsidian';\nimport {ApplicationGraph} from './ApplicationGraph';\n\n@Injectable(ApplicationGraph)\nexport class MyClass {\n  @LazyInject() private httpClient!: HttpClient;\n\n  public init() {\n    console.log(this.httpClient === undefined); // true\n    Obsidian.inject(this);\n    console.log(this.httpClient === undefined); // false\n  }\n}\n")))}u.isMDXComponent=!0}}]);