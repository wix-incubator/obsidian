"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2529],{1184:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(4041);const o={},i=t.createContext(o);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:s},e.children)}},9813:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"reference/testKit/mockModel","title":"mockModel","description":"mockModel is a utility function that allows you to easily mock models.","source":"@site/docs/reference/testKit/mockModel.mdx","sourceDirName":"reference/testKit","slug":"/reference/testKit/mockModel","permalink":"/obsidian/docs/reference/testKit/mockModel","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/testKit/mockModel.mdx","tags":[{"inline":true,"label":"Model","permalink":"/obsidian/docs/tags/model"},{"inline":true,"label":"Testing","permalink":"/obsidian/docs/tags/testing"}],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"mockModel","tags":["Model","Testing"]},"sidebar":"reference","previous":{"title":"mockGraphs","permalink":"/obsidian/docs/reference/testKit/mockGraphs"}}');var o=n(1085),i=n(1184);const r={sidebar_position:2,title:"mockModel",tags:["Model","Testing"]},l=void 0,d={},c=[{value:"Reference",id:"reference",level:2},{value:"<code>mockModel(mock, BaseClass?): Model</code>",id:"mockmodelmock-baseclass-model",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:2},{value:"Stubbing Observable Properties",id:"stubbing-observable-properties",level:3},{value:"Including class methods and getters",id:"including-class-methods-and-getters",level:3}];function a(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"mockModel"})," ",(0,o.jsxs)(s.strong,{children:["is a utility function that allows you to easily mock ",(0,o.jsx)(s.a,{href:"/docs/reference/model",children:"models"}),"."]})]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"#reference",children:"Reference"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"#mockmodelmock-baseclass-model",children:"mockModel(mock, BaseClass)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsx)(s.h3,{id:"mockmodelmock-baseclass-model",children:(0,o.jsx)(s.code,{children:"mockModel(mock, BaseClass?): Model"})}),"\n",(0,o.jsx)(s.p,{children:"Mock a given model, and return a new instance with the specified properties stubbed."}),"\n",(0,o.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(s.p,{children:["\u2022 ",(0,o.jsx)(s.code,{children:"mock"}),": The partial implementation of the model to mock. Only the specified Observable properties will be stubbed. The rest will be left undefined. ",(0,o.jsx)("br",{}),"\n\u2022 ",(0,o.jsx)(s.code,{children:"BaseClass?"}),": An optional base class to use for the mock. This is useful in cases where your model has helper methods or getters that should be included in the mock."]}),"\n",(0,o.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,o.jsx)(s.p,{children:"\u2022 A new instance of the model with the specified properties stubbed."}),"\n",(0,o.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(s.h3,{id:"stubbing-observable-properties",children:"Stubbing Observable Properties"}),"\n",(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.code,{children:"mockModel"})," function allows you to easily stub out Observable properties in a model. Consider the following example:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"class AppState {\n  public session = new Observable<string | undefined>();\n  public isLoggedIn = new MediatorObservable(false).mapSource(session => !!session);\n}\n"})}),"\n",(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.code,{children:"isLoggedIn"})," property is a ",(0,o.jsx)(s.a,{href:"/docs/reference/mediatorObservable",children:"MediatorObservable"})," that maps the value of the ",(0,o.jsx)(s.code,{children:"session"})," property to a boolean. When using this model in a test, we don't want to be bothered with the implementation details of the ",(0,o.jsx)(s.code,{children:"isLoggedIn"})," property. We can easily stub out the ",(0,o.jsx)(s.code,{children:"isLoggedIn"})," while ignoring the ",(0,o.jsx)(s.code,{children:"session"})," property by using the ",(0,o.jsx)(s.code,{children:"mockModel"})," function."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"import { mockModel } from 'react-obsidian';\n\ndescribe('AppState', () => {\n  it('should return true if the user is logged in', () => {\n    const mockAppState = mockModel({\n      isLoggedIn: new Observable(true)\n    });\n\n    expect(mockAppState.isLoggedIn.value).toBe(true);\n  });\n});\n"})}),"\n",(0,o.jsx)(s.h3,{id:"including-class-methods-and-getters",children:"Including class methods and getters"}),"\n",(0,o.jsxs)(s.p,{children:["We encourage developers to add helper methods and getters to their models. This is a great way to encapsulate business logic in the domain layer. In order to include these methods in your mocks you can provide a base class to the ",(0,o.jsx)(s.code,{children:"mockModel"})," function."]}),"\n",(0,o.jsxs)(s.p,{children:["Consider the following example. The ",(0,o.jsx)(s.code,{children:"AppState"})," model has a getter called ",(0,o.jsx)(s.code,{children:"isLoggedIn"})," that returns a boolean based on the value of the ",(0,o.jsx)(s.code,{children:"session"})," property."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"import { injectHook, Model } from 'react-obsidian';\n\nclass AppState extends Model {\n  public user = new Observable<User>(); // { firstName: string; lastName: string;}\n  public session = new Observable<string>();\n\n  get isLoggedIn(): boolean {\n    return !!this.loggedIn.value;\n  }\n}\n"})}),"\n",(0,o.jsxs)(s.p,{children:["In order to include the ",(0,o.jsx)(s.code,{children:"isLoggedIn"})," getter in the mock, we can provide the ",(0,o.jsx)(s.code,{children:"AppState"})," class as the second argument to ",(0,o.jsx)(s.code,{children:"mockModel"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:"import { mockModel } from 'react-obsidian';\n\ndescribe('AppState', () => {\n  it('should return true if the user is logged in', () => {\n    const mockAppState = mockModel({\n        session: new Observable('1234')\n      },\n      AppState // When a base class is provided, the mock will be an instance of that class.\n    );\n\n    expect(mockAppState.isLoggedIn).toBe(true);\n  });\n});\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);