"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5065],{1184:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var s=n(4041);const t={},a=s.createContext(t);function i(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:r},e.children)}},4747:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"reference/useObserver","title":"useObserver","description":"useObserver is a Hook that allows you to react to changes in an observable.","source":"@site/docs/reference/useObserver.mdx","sourceDirName":"reference","slug":"/reference/useObserver","permalink":"/obsidian/docs/reference/useObserver","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/useObserver.mdx","tags":[{"inline":true,"label":"useObserver","permalink":"/obsidian/docs/tags/use-observer"},{"inline":true,"label":"Reactivity","permalink":"/obsidian/docs/tags/reactivity"}],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"useObserver","tags":["useObserver","Reactivity"]},"sidebar":"reference","previous":{"title":"MediatorObservable","permalink":"/obsidian/docs/reference/mediatorObservable"},"next":{"title":"Model","permalink":"/obsidian/docs/reference/model"}}');var t=n(1085),a=n(1184);const i={sidebar_position:4,title:"useObserver",tags:["useObserver","Reactivity"]},o=void 0,l={},c=[{value:"Reference",id:"reference",level:2},{value:"useObserver(observable)",id:"useobserverobservable",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"set function",id:"set-function",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4}];function u(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"useObserver"})," ",(0,t.jsx)(r.strong,{children:"is a Hook that allows you to react to changes in an observable."})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const [value, setValue] = useObserver(observable);\n"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"#reference",children:"Reference"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#useobserverobservable",children:"useObserver(observable)"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#set-function",children:"set function"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"reference",children:"Reference"}),"\n",(0,t.jsx)(r.h3,{id:"useobserverobservable",children:"useObserver(observable)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { useObserver } from 'react-obsidian';\n\nconst count = new Observable(0);\n\nconst useButtonPress = () => {\n  const [value, setValue] = useObserver(count);\n  return {\n    onPress: () => setValue(value + 1),\n  };\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The convention is to name observer variables like [something, setSomething] using ",(0,t.jsx)(r.a,{href:"https://javascript.info/destructuring-assignment",children:"array destructuring"}),"."]}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"observable"}),": The observable to observe.","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"If you pass a function as the observable, it will be treated as a generator function. Obsidian will call the generator once when the component is mounted and observe the returned observable."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"useObserver"})," returns an array of two values: the current value of the observable, and a function to set the value of the observable."]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"The current value."}),"\n",(0,t.jsxs)(r.li,{children:["A ",(0,t.jsx)(r.code,{children:"set"})," function that lets you update the value of the observable and trigger a re-render."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"set-function",children:"set function"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"set"})," function returned by ",(0,t.jsx)(r.code,{children:"useObserver"})," lets you update the value of the observable and trigger a re-render."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const [count, setCount] = useObserver(() => new Observable(0));\n\nfunction handleClick() {\n  setCount(count + 1);\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"next"}),": The new value of the observable."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"set"})," returns nothing."]})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);