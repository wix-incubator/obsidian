"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2529],{4235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(9575),r=(n(4041),n(2247));const a={sidebar_position:2,title:"mockModel"},s=void 0,i={unversionedId:"reference/testKit/mockModel",id:"reference/testKit/mockModel",title:"mockModel",description:"mockModel is a utility function that allows you to easily mock models.",source:"@site/docs/reference/testKit/mockModel.mdx",sourceDirName:"reference/testKit",slug:"/reference/testKit/mockModel",permalink:"/obsidian/docs/reference/testKit/mockModel",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/testKit/mockModel.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"mockModel"},sidebar:"reference",previous:{title:"mockGraphs",permalink:"/obsidian/docs/reference/testKit/mockGraphs"}},l={},c=[{value:"Reference",id:"reference",level:2},{value:"<code>mockModel(mock, BaseClass?): Model</code>",id:"mockmodelmock-baseclass-model",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:2},{value:"Stubbing Observable Properties",id:"stubbing-observable-properties",level:3},{value:"Including class methods and getters",id:"including-class-methods-and-getters",level:3}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,o.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"mockModel")," ",(0,r.yg)("strong",{parentName:"p"},"is a utility function that allows you to easily mock ",(0,r.yg)("a",{parentName:"strong",href:"/docs/reference/model"},"models"),".")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#reference"},"Reference"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#mockmodelmodeltomock-partialmodel-model"},"mockModel(modelToMock)"))))),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("h3",{id:"mockmodelmock-baseclass-model"},(0,r.yg)("inlineCode",{parentName:"h3"},"mockModel(mock, BaseClass?): Model")),(0,r.yg)("p",null,"Mock a given model, and return a new instance with the specified properties stubbed."),(0,r.yg)("h4",{id:"parameters"},"Parameters"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"mock"),": The partial implementation of the model to mock. Only the specified Observable properties will be stubbed. The rest will be left undefined. ",(0,r.yg)("br",null),"\n\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"BaseClass?"),": An optional base class to use for the mock. This is useful in cases where your model has helper methods or getters that should be included in the mock. "),(0,r.yg)("h4",{id:"returns"},"Returns"),(0,r.yg)("p",null,"\u2022 A new instance of the model with the specified properties stubbed."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("h3",{id:"stubbing-observable-properties"},"Stubbing Observable Properties"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"mockModel")," function allows you to easily stub out Observable properties in a model. Consider the following example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"class AppState {\n  public session = new Observable<string | undefined>();\n  public isLoggedIn = new MediatorObservable(false).mapSource(session => !!session);\n}\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," property is a ",(0,r.yg)("a",{parentName:"p",href:"/docs/reference/mediatorObservable"},"MediatorObservable")," that maps the value of the ",(0,r.yg)("inlineCode",{parentName:"p"},"session")," property to a boolean. When using this model in a test, we don't want to be bothered with the implementation details of the ",(0,r.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," property. We can easily stub out the ",(0,r.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," while ignoring the ",(0,r.yg)("inlineCode",{parentName:"p"},"session")," property by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"mockModel")," function."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { mockModel } from 'react-obsidian';\n\ndescribe('AppState', () => {\n  it('should return true if the user is logged in', () => {\n    const mockAppState = mockModel({\n      isLoggedIn: new Observable(true)\n    });\n\n    expect(mockAppState.isLoggedIn.value).toBe(true);\n  });\n});\n")),(0,r.yg)("h3",{id:"including-class-methods-and-getters"},"Including class methods and getters"),(0,r.yg)("p",null,"We encourage developers to add helper methods and getters to their models. This is a great way to encapsulate business logic in the domain layer. In order to include these methods in your mocks you can provide a base class to the ",(0,r.yg)("inlineCode",{parentName:"p"},"mockModel")," function."),(0,r.yg)("p",null,"Consider the following example. The ",(0,r.yg)("inlineCode",{parentName:"p"},"AppState")," model has a getter called ",(0,r.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," that returns a boolean based on the value of the ",(0,r.yg)("inlineCode",{parentName:"p"},"session")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { injectHook, Model } from 'react-obsidian';\n\nclass AppState extends Model {\n  public user = new Observable<User>(); // { firstName: string; lastName: string;}\n  public session = new Observable<string>();\n\n  get isLoggedIn(): boolean {\n    return !!this.loggedIn.value;\n  }\n}\n")),(0,r.yg)("p",null,"In order to include the ",(0,r.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," getter in the mock, we can provide the ",(0,r.yg)("inlineCode",{parentName:"p"},"AppState")," class as the second argument to ",(0,r.yg)("inlineCode",{parentName:"p"},"mockModel"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { mockModel } from 'react-obsidian';\n\ndescribe('AppState', () => {\n  it('should return true if the user is logged in', () => {\n    const mockAppState = mockModel({\n        session: new Observable('1234')\n      },\n      AppState // When a base class is provided, the mock will be an instance of that class.\n    );\n\n    expect(mockAppState.isLoggedIn).toBe(true);\n  });\n});\n")))}m.isMDXComponent=!0},2247:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var o=n(4041);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?o.createElement(g,s(s({ref:t},p),{},{components:n})):o.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);