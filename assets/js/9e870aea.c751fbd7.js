"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5065],{5680:(e,r,n)=>{n.d(r,{xA:()=>c,yg:()=>g});var t=n(6540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),i=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},c=function(e){var r=i(e.components);return t.createElement(u.Provider,{value:r},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},v=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=i(n),v=a,g=p["".concat(u,".").concat(v)]||p[v]||b[v]||s;return n?t.createElement(g,o(o({ref:r},c),{},{components:n})):t.createElement(g,o({ref:r},c))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=v;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=n[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},4931:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var t=n(8168),a=(n(6540),n(5680));const s={sidebar_position:3,title:"useObserver"},o=void 0,l={unversionedId:"reference/useObserver",id:"reference/useObserver",title:"useObserver",description:"useObserver is a Hook that allows you to react to changes in an observable.",source:"@site/docs/reference/useObserver.mdx",sourceDirName:"reference",slug:"/reference/useObserver",permalink:"/obsidian/docs/reference/useObserver",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/useObserver.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"useObserver"},sidebar:"reference",previous:{title:"MediatorObservable",permalink:"/obsidian/docs/reference/mediatorObservable"},next:{title:"useObservers",permalink:"/obsidian/docs/reference/useObservers"}},u={},i=[{value:"Reference",id:"reference",level:2},{value:"useObserver(observable)",id:"useobserverobservable",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"set function",id:"set-function",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4}],c={toc:i},p="wrapper";function b(e){let{components:r,...n}=e;return(0,a.yg)(p,(0,t.A)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useObserver")," ",(0,a.yg)("strong",{parentName:"p"},"is a Hook that allows you to react to changes in an observable.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const [value, setValue] = useObserver(observable);\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#reference"},"Reference"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#useobserverobservable"},"useObserver(observable)")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#set-function"},"set function"))))),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("h3",{id:"useobserverobservable"},"useObserver(observable)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { useObserver } from 'react-obsidian';\n\nconst count = new Observable(0);\n\nconst useButtonPress = () => {\n  const [value, setValue] = useObserver(count);\n  return {\n    onPress: () => setValue(value + 1),\n  };\n}\n")),(0,a.yg)("p",null,"The convention is to name observer variables like ","[something, setSomething]"," using ",(0,a.yg)("a",{parentName:"p",href:"https://javascript.info/destructuring-assignment"},"array destructuring"),"."),(0,a.yg)("h4",{id:"parameters"},"Parameters"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"observable"),": The observable to observe.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If you pass a function as the observable, it will be treated as a generator function. Obsidian will call the generator once when the component is mounted and observe the returned observable.")))),(0,a.yg)("h4",{id:"returns"},"Returns"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useObserver")," returns an array of two values: the current value of the observable, and a function to set the value of the observable."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"The current value."),(0,a.yg)("li",{parentName:"ol"},"A ",(0,a.yg)("inlineCode",{parentName:"li"},"set")," function that lets you update the value of the observable and trigger a re-render.")),(0,a.yg)("hr",null),(0,a.yg)("h3",{id:"set-function"},"set function"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"set")," function returned by ",(0,a.yg)("inlineCode",{parentName:"p"},"useObserver")," lets you update the value of the observable and trigger a re-render."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const [count, setCount] = useObserver(() => new Observable(0));\n\nfunction handleClick() {\n  setCount(count + 1);\n}\n")),(0,a.yg)("h4",{id:"parameters-1"},"Parameters"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"next"),": The new value of the observable.")),(0,a.yg)("h4",{id:"returns-1"},"Returns"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"set")," returns nothing."))}b.isMDXComponent=!0}}]);