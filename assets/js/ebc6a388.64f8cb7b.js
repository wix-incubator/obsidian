"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2141],{5887:e=>{e.exports=JSON.parse('{"tag":{"label":"Reactivity","permalink":"/obsidian/docs/tags/reactivity","allTagsPath":"/obsidian/docs/tags","count":7,"items":[{"id":"guides/avoidingPropDrilling","title":" Avoiding prop drilling","description":"Prop Drilling is a common issue in React development where props are passed down multiple levels of the component hierarchy, making the code difficult to maintain and understand. This guide will show you how to use @LifecycleBound graphs to avoid Prop Drilling.","permalink":"/obsidian/docs/guides/avoidingPropDrilling"},{"id":"reference/mediatorObservable","title":"MediatorObservable","description":"MediatorObservable is a type of Observable that acts as an adapter between one or more source Observables. It allows us to create a new observable stream based on the values of other observables.","permalink":"/obsidian/docs/reference/mediatorObservable"},{"id":"guides/mvvm","title":"MVVM architecture with Obsidian","description":"MVVM (Model-View-ViewModel) is a software architecture widely used in modern front-end development. It emphasizes separation of concerns and improves code structure. In the Model-View-ViewModel pattern, code is organized into three layers:","permalink":"/obsidian/docs/guides/mvvm"},{"id":"reference/observable","title":"Observable","description":"Observable is a class that represents a stream of values. It is similar to Promise in that it is a container for a value that will be available in the future. However, unlike Promise, Observable can emit multiple values over time.","permalink":"/obsidian/docs/reference/observable"},{"id":"documentation/usage/Reactivity","title":"Reactivity","description":"Obsidian is first and foremost a dependency injection library. But it also includes reactive programming features that allow you to observe changes in your data and react to them. This is useful for things like updating the UI when a value changes.","permalink":"/obsidian/docs/documentation/usage/Reactivity"},{"id":"reference/useObserver","title":"useObserver","description":"useObserver is a Hook that allows you to react to changes in an observable.","permalink":"/obsidian/docs/reference/useObserver"},{"id":"reference/useObservers","title":"useObservers","description":"useObservers is a Hook that allows you to react to changes in multiple observables in a single statement.","permalink":"/obsidian/docs/reference/useObservers"}],"unlisted":false}}')}}]);