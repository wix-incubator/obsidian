"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3185],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>v});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),i=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=i(e.components);return n.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},b=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=i(t),v=a,d=b["".concat(u,".").concat(v)]||b[v]||p[v]||s;return t?n.createElement(d,o(o({ref:r},c),{},{components:t})):n.createElement(d,o({ref:r},c))}));function v(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=b;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},1904:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=t(7462),a=(t(7294),t(3905));const s={sidebar_position:3,title:"useObserver"},o=void 0,l={unversionedId:"reference/useObserver",id:"reference/useObserver",title:"useObserver",description:"useObserver is a Hook that allows you to react to changes in an observable.",source:"@site/docs/reference/useObserver.mdx",sourceDirName:"reference",slug:"/reference/useObserver",permalink:"/obsidian/docs/reference/useObserver",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/useObserver.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"useObserver"},sidebar:"reference",previous:{title:"MediatorObservable",permalink:"/obsidian/docs/reference/mediatorObservable"},next:{title:"useObservers",permalink:"/obsidian/docs/reference/useObservers"}},u={},i=[{value:"Reference",id:"reference",level:2},{value:"useObserver(observable)",id:"useobserverobservable",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"set function",id:"set-function",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4}],c={toc:i};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useObserver")," ",(0,a.kt)("strong",{parentName:"p"},"is a Hook that allows you to react to changes in an observable.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const [value, setValue] = useObserver(observable);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#reference"},"Reference"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#useobserverobservable"},"useObserver(observable)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#set-function"},"set function"))))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("h3",{id:"useobserverobservable"},"useObserver(observable)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { useObserver } from 'react-obsidian';\n\nconst count = new Observable(0);\n\nconst useButtonPress = () => {\n  const [value, setValue] = useObserver(count);\n  return {\n    onPress: () => setValue(value + 1),\n  };\n}\n")),(0,a.kt)("p",null,"The convention is to name observer variables like ","[something, setSomething]"," using ",(0,a.kt)("a",{parentName:"p",href:"https://javascript.info/destructuring-assignment"},"array destructuring"),"."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"observable"),": The observable to observe.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If you pass a function as the observable, it will be treated as a generator function. Obsidian will call the generator once when the component is mounted and observe the returned observable.")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useObserver")," returns an array of two values: the current value of the observable, and a function to set the value of the observable."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The current value."),(0,a.kt)("li",{parentName:"ol"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"set")," function that lets you update the value of the observable and trigger a re-render.")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"set-function"},"set function"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," function returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"useObserver")," lets you update the value of the observable and trigger a re-render."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const [count, setCount] = useObserver(() => new Observable(0));\n\nfunction handleClick() {\n  setCount(count + 1);\n}\n")),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"next"),": The new value of the observable.")),(0,a.kt)("h4",{id:"returns-1"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"set")," returns nothing."))}p.isMDXComponent=!0}}]);