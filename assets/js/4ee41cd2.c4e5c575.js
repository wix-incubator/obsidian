"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7963],{4693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=t(1085),i=t(1184);const a={sidebar_position:5,title:"Classes"},o=void 0,c={id:"documentation/usage/Classes",title:"Classes",description:"Injecting classes",source:"@site/docs/documentation/usage/Classes.mdx",sourceDirName:"documentation/usage",slug:"/documentation/usage/Classes",permalink:"/obsidian/docs/documentation/usage/Classes",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/usage/Classes.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Classes"},sidebar:"docs2",previous:{title:"Class components",permalink:"/obsidian/docs/documentation/usage/ClassComponents"},next:{title:"Reactivity",permalink:"/obsidian/docs/documentation/usage/Reactivity"}},r={},l=[{value:"Injecting classes",id:"injecting-classes",level:2},{value:"Delayed injection",id:"delayed-injection",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"injecting-classes",children:"Injecting classes"}),"\n",(0,s.jsxs)(n.p,{children:["Injecting classes is a two step process. First, annotate the class with the ",(0,s.jsx)(n.code,{children:"@Injectable"})," annotation and pass the graph from which dependencies should be resolve. Then, declare the dependencies as class members and annotate them with the ",(0,s.jsx)(n.code,{children:"@Inject"})," annotation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {Injectable, Inject} from 'react-obsidian';\nimport {ApplicationGraph} from './ApplicationGraph';\n\n@Injectable(ApplicationGraph)\nexport class MyClass {\n  @Inject() private httpClient!: HttpClient;\n  \n}\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Always prefer constructor injection over field injection",type:"important",children:(0,s.jsxs)(n.p,{children:["Constructor injection is the preferred way to inject dependencies. It is more explicit and easier to test. ",(0,s.jsx)(n.strong,{children:"Field injection should only be used when a class is not instantiated by a graph."})]})}),"\n",(0,s.jsx)(n.h2,{id:"delayed-injection",children:"Delayed injection"}),"\n",(0,s.jsxs)(n.p,{children:["Dependencies annotated with the ",(0,s.jsx)(n.code,{children:"@Inject"})," annotation are resolved immediately ",(0,s.jsx)(n.strong,{children:"after"})," the constructor is called. If you want to inject a class at a later point in time, you can use the ",(0,s.jsx)(n.code,{children:"@LateInject"})," annotation instead, and inject the dependencies by manually with the ",(0,s.jsx)(n.code,{children:"Obsidian.inject()"})," function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {Injectable, LateInject} from 'react-obsidian';\nimport {ApplicationGraph} from './ApplicationGraph';\n\n@Injectable(ApplicationGraph)\nexport class MyClass {\n  @LateInject() private httpClient!: HttpClient;\n\n  public init() {\n    console.log(this.httpClient === undefined); // true\n    Obsidian.inject(this);\n    console.log(this.httpClient === undefined); // false\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(4041);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);