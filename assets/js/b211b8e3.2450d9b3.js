"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9467],{6765:(e,n,t)=>{t.d(n,{A:()=>i});t(4041);var r=t(3640);const s={tabItem:"tabItem_OMyP"};var a=t(1085);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:t,children:n})}},6610:(e,n,t)=>{t.d(n,{A:()=>w});var r=t(4041),s=t(3640),a=t(3030),i=t(6090),o=t(931),c=t(4939),d=t(7192),l=t(4658);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=p(e),[i,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[d,h]=g({queryString:t,groupId:s}),[m,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,l.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),f=(()=>{const e=d??m;return u({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{f&&c(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),b(e)}),[h,b,a]),tabValues:a}}var b=t(8529);const f={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var x=t(1085);function v(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),l=e=>{const n=e.currentTarget,t=c.indexOf(n),s=o[t].value;s!==r&&(d(n),i(s))},h=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:h,onClick:l,...a,className:(0,s.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,x.jsx)(v,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function w(e){const n=(0,b.A)();return(0,x.jsx)(y,{...e,children:h(e.children)},String(n))}},2502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var r=t(1085),s=t(1184),a=t(6610),i=t(6765);const o={sidebar_position:1,tags:["Graph","Lifecycle-bound"]},c=void 0,d={id:"documentation/usage/Graphs",title:"Graphs",description:"Introduction",source:"@site/docs/documentation/usage/Graphs.mdx",sourceDirName:"documentation/usage",slug:"/documentation/usage/Graphs",permalink:"/obsidian/docs/documentation/usage/Graphs",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/usage/Graphs.mdx",tags:[{inline:!0,label:"Graph",permalink:"/obsidian/docs/tags/graph"},{inline:!0,label:"Lifecycle-bound",permalink:"/obsidian/docs/tags/lifecycle-bound"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["Graph","Lifecycle-bound"]},sidebar:"docs2",previous:{title:"Usage",permalink:"/obsidian/docs/category/usage"},next:{title:"Hooks",permalink:"/obsidian/docs/documentation/usage/Hooks"}},l={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Declaring dependencies in a graph",id:"declaring-dependencies-in-a-graph",level:2},{value:"Specifying relationships between dependencies",id:"specifying-relationships-between-dependencies",level:2},{value:"Graph types",id:"graph-types",level:2},{value:"The singleton graph",id:"the-singleton-graph",level:3},{value:"The lifecycle-bound graph",id:"the-lifecycle-bound-graph",level:3},{value:"Passing props to a lifecycle-bound graph",id:"passing-props-to-a-lifecycle-bound-graph",level:4},{value:"The lifecycle of a lifecycle-bound graph",id:"the-lifecycle-of-a-lifecycle-bound-graph",level:4},{value:"Graph composition",id:"graph-composition",level:2},{value:"Subgraphs",id:"subgraphs",level:3},{value:"Abstract graphs",id:"abstract-graphs",level:3},{value:"Typed dependencies",id:"typed-dependencies",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"In Object Oriented Programming, programs are organized around objects, where each object has a specific purpose. These objects can require other objects to perform their responsibilities. The required objects are called dependencies. Providing these dependencies manually is a tedious and error-prone process. The dependency injection pattern is a way to automate this process so you can focus on the logic of your application instead of writing boilerplate code."}),"\n",(0,r.jsx)(n.p,{children:'Before you can inject dependencies into hooks, components and classes, the dependencies first need to be declared so Obsidian knows how to construct them. In Obsidian, dependencies are declared in classes called "Graphs". Graphs create a centralized place where dependencies are defined. This makes them a powerful tool for understanding the relationships between objects in your program.'}),"\n",(0,r.jsx)(n.h2,{id:"declaring-dependencies-in-a-graph",children:"Declaring dependencies in a graph"}),"\n",(0,r.jsxs)(n.p,{children:["The snippet below shows a basic example of a Graph. It defines two dependencies, ",(0,r.jsx)(n.code,{children:"httpClient"})," and ",(0,r.jsx)(n.code,{children:"databaseService"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="ApplicationGraph.ts"',children:"import {singleton, graph, ObjectGraph, provides} from 'react-obsidian';\n\n@singleton() @graph()\nexport class ApplicationGraph extends ObjectGraph {\n  @provides()\n  httpClient(): HttpClient {\n    return new HttpClient();\n  }\n\n  @provides()\n  databaseService(): DatabaseService {\n    return new DatabaseService();\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Graphs must be annotated with the ",(0,r.jsx)(n.code,{children:"@graph"})," decorator. In this example we chose to annotate the class with the ",(0,r.jsx)(n.code,{children:"@singleton"})," decorator as well, which means that the graph and the dependencies it provides will only be constructed once."]}),"\n",(0,r.jsxs)(n.p,{children:["Dependencies are constructed in methods annotated with the ",(0,r.jsx)(n.code,{children:"@provides"})," annotation. The ",(0,r.jsx)(n.code,{children:"@provides"})," annotation is used to tell Obsidian that the method is a dependency provider. From now on we'll refer to these methods as providers. Obsidian uses the provider's method name as the dependency's name. In this example, the ",(0,r.jsx)(n.code,{children:"httpClient"})," provider method provides the ",(0,r.jsx)(n.code,{children:"httpClient"})," dependency. The ",(0,r.jsx)(n.code,{children:"databaseService"})," provider method provides the ",(0,r.jsx)(n.code,{children:"databaseService"})," dependency."]}),"\n",(0,r.jsx)(n.p,{children:"Once your graph is declared you can use it to inject dependencies into the various constructs that form your application:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/documentation/usage/Hooks#injecting-hooks",children:"Inject hooks"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/documentation/usage/FunctionalComponents",children:"Inject functional components"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/documentation/usage/ClassComponents",children:"Inject components"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/documentation/usage/Classes",children:"Inject classes"})}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Did you know?",type:"info",children:(0,r.jsxs)(n.p,{children:['The term "graph" comes from ',(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Graph_theory",children:"graph theory"}),". Obsidian constructs ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Directed_acyclic_graph",children:"Directed Acyclic Graphs"})," (DAGs) to represent the dependencies between objects. This type of graph ensures there are no circular dependencies between objects which cause call stack overflows and other unexpected bugs."]})}),"\n",(0,r.jsx)(n.h2,{id:"specifying-relationships-between-dependencies",children:"Specifying relationships between dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Some of the services defined in your graphs may be independent, meaning they don't require any dependencies to be constructed. However, most of the time, services will require other services to perform their responsibilities. In these cases, you can specify the dependencies of a service as arguments in the provider and Obsidian will resolve them automatically."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="A graph that provides a service that depends on other services"',children:"import {singleton, graph, ObjectGraph, provides} from 'react-obsidian';\n\n@singleton() @graph()\nexport class ApplicationGraph extends ObjectGraph {\n  @provides()\n  httpClient(): HttpClient {\n    return new HttpClient();\n  }\n\n  @provides()\n  databaseService(): DatabaseService {\n    return new DatabaseService();\n  }\n\n  @provides()\n  appInitializer(httpClient: HttpClient, databaseService: DatabaseService): AppInitializer {\n    return new AppInitializer(httpClient, databaseService);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Providers are evaluated lazily. This means that a provider is evaluated only when the dependency it provides is requested. Dependencies that are not used in the application, will never be constructed."})}),"\n",(0,r.jsx)(n.h2,{id:"graph-types",children:"Graph types"}),"\n",(0,r.jsx)(n.p,{children:"There are two types of graphs in Obsidian: A singleton graph and a lifecycle-bound graph."}),"\n",(0,r.jsx)(n.h3,{id:"the-singleton-graph",children:"The singleton graph"}),"\n",(0,r.jsxs)(n.p,{children:["Applications typically have at least one singleton graph. These graphs are used to provide dependencies that are used throughout the application. These dependencies are usually singletons, which means they should only be constructed once. The ",(0,r.jsx)(n.code,{children:"ApplicationGraph"})," in the ",(0,r.jsx)(n.a,{href:"/docs/documentation/usage/Graphs#specifying-relationships-between-dependencies",children:"example above"})," is a singleton graph."]}),"\n",(0,r.jsxs)(n.p,{children:["To declare a singleton graph, annotate the graph class with the ",(0,r.jsx)(n.code,{children:"@singleton"})," decorator."]}),"\n",(0,r.jsx)(n.h3,{id:"the-lifecycle-bound-graph",children:"The lifecycle-bound graph"}),"\n",(0,r.jsx)(n.p,{children:"Lifecycle-bound graphs are used to provide dependencies that are shared between components and hooks in a specific UI scope."}),"\n",(0,r.jsx)(n.p,{children:"Obsidian supports injecting two types of UI scopes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Feature scope (default)"}),": A feature scope is a scope that is shared between multiple screens. For example, a user authentication flow might consist of multiple screens that share the same dependencies. In this case, you can use a lifecycle-bound graph to provide the dependencies for the entire flow. When declaring a feature-scoped graph, a single instance of the graph is created and shared between all the components and hooks that request it."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="A feature-scoped lifecycle-bound graph"',children:"import {lifecycleBound, graph, ObjectGraph, provides} from 'react-obsidian';\n\n@lifecycleBound({scope: 'feature'}) @graph()\nclass AuthGraph extends ObjectGraph {\n  @provides()\n  userService(): UserService {\n    return new UserService();\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component scope"}),": A component scope is a scope that is shared between a component and its children. For example, a form component might have multiple input fields that share the same dependencies. In this case, you can use a component-scoped lifecycle-bound graph to provide the dependencies for the form."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="A component-scoped lifecycle-bound graph"',children:"import {lifecycleBound, graph, ObjectGraph, provides} from 'react-obsidian';\n\n@lifecycleBound({scope: 'component'}) @graph()\nclass FormGraph extends ObjectGraph {\n  @provides()\n  validationService(): ValidationService {\n    return new ValidationService();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Lifecycle-bound graphs are feature-scoped by default."})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom scope"}),": A custom scope is a special case of a feature scope. When multiple ",(0,r.jsx)(n.code,{children:"@lifecycleBound"})," graphs share the same custom scope, they are considered to be part of the same UI scope. When a custom scoped graph is requested, Obsidian will create all the subgraphs in the same UI scope and destroy them when the last component or hook that requested them is unmounted."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="A custom-scoped lifecycle-bound graph"',children:"import {lifecycleBound, graph, ObjectGraph, provides} from 'react-obsidian';\n\n@lifecycleBound({scope: 'AppScope'}) @graph({subgraphs: [ScreenGraph]})\nclass HomeScreenGraph extends ObjectGraph {\n  constructor(private props: HomeScreenProps & BaseProps) {\n    super(props);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="A custom-scoped lifecycle-bound subgraph"',children:"@lifecycleBound({scope: 'AppScope'}) @graph()\nclass ScreenGraph extends ObjectGraph {\n  constructor(private props: BaseProps) {\n    super(props);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"The differences between a feature-scoped graph and a custom-scoped graph:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"By default, subgraphs are instantiated lazily. Custom-scoped subgraphs are instantiated immediately when a parent graph with the same scope is instantiated."}),"\n",(0,r.jsx)(n.li,{children:"When instantiated, custom-scoped subgraphs receive the props of the custom-scoped graph that triggered their instantiation."}),"\n",(0,r.jsx)(n.li,{children:"Custom-scoped subgraphs can only be instantiated from a lifecycle bound graph with the same scope."}),"\n"]})]}),"\n",(0,r.jsx)(n.h4,{id:"passing-props-to-a-lifecycle-bound-graph",children:"Passing props to a lifecycle-bound graph"}),"\n",(0,r.jsxs)(n.p,{children:["When a graph is created, it receives the props of the component or hook that requested it. This means that the graph can use the props to construct the dependencies it provides. The ",(0,r.jsx)(n.code,{children:"@lifecycleBound"})," in the example below graph provides a ",(0,r.jsx)(n.code,{children:"userService"})," which requires a ",(0,r.jsx)(n.code,{children:"userId"}),". The ",(0,r.jsx)(n.code,{children:"userId"})," is obtained from props."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="A lifecycle-bound graph"',children:"import {lifecycleBound, graph, ObjectGraph, provides} from 'react-obsidian';\n\ntype HomeScreenProps {\n  userId: string;\n}\n\n@lifecycleBound() @graph()\nclass HomeGraph extends ObjectGraph<HomeScreenProps> {\n  private userId: string;\n\n  construct(props: HomeScreenProps) {\n    super(props);\n    this.userId = props.userId;\n  }\n\n  @provides()\n  userService(): UserService {\n    return new UserService(this.userId);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"the-lifecycle-of-a-lifecycle-bound-graph",children:"The lifecycle of a lifecycle-bound graph"}),"\n",(0,r.jsx)(n.p,{children:"Lifecycle-bound graphs are created when they are requested and are destroyed when the last component or hook that requested them is unmounted. This means that the dependencies provided by a lifecycle-bound graph are shared between components and hooks within the same UI scope and are destroyed when the UI scope is destroyed."}),"\n",(0,r.jsx)(n.h2,{id:"graph-composition",children:"Graph composition"}),"\n",(0,r.jsx)(n.p,{children:"Graph composition is a powerful feature that allows you to create complex dependency graphs by combining smaller graphs. Composing graphs is useful when you want to reuse a graph in multiple places. For example, you might have a singleton graph that provides application-level dependencies. You might also have a lifecycle-bound graph that provides dependencies for a specific UI flow. You can compose these graphs together so that the lifecycle-bound graph can also inject the dependencies provided by the singleton graph."}),"\n",(0,r.jsx)(n.h3,{id:"subgraphs",children:"Subgraphs"}),"\n",(0,r.jsxs)(n.p,{children:["The most common method to compose graphs is to pass a ",(0,r.jsx)(n.code,{children:"subgraphs"})," array to the ",(0,r.jsx)(n.code,{children:"@graph"})," decorator. The ",(0,r.jsx)(n.code,{children:"subgraphs"}),' array contains the graphs you want to "include" in your graph.']}),"\n",(0,r.jsxs)(n.p,{children:["In the example below we declared a lifecycle-bound graph called ",(0,r.jsx)(n.code,{children:"LoginGraph"}),". This graph provides a single dependency called ",(0,r.jsx)(n.code,{children:"loginService"})," which has a dependency on ",(0,r.jsx)(n.code,{children:"httpClient"}),". Since ",(0,r.jsx)(n.code,{children:"httpClient"})," is exposed via the ",(0,r.jsx)(n.code,{children:"ApplicationGraph"}),", we included it in the ",(0,r.jsx)(n.code,{children:"subgraphs"})," array of our graph."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="LoginGraph.ts"',children:"import {graph, ObjectGraph, provides} from 'react-obsidian';\nimport {ApplicationGraph} from './ApplicationGraph';\n\n@lifecycleBound() @graph({subgraphs: [ApplicationGraph]}) \nexport class LoginGraph extends ObjectGraph {\n  @provides()\n  loginService(httpClient: HttpClient): LoginService {\n    return new LoginService(httpClient);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"abstract-graphs",children:"Abstract graphs"}),"\n",(0,r.jsx)(n.p,{children:"Abstract graphs are graphs that are not instantiated directly. Instead, they are used as a base for other graphs. Abstract graphs are useful when you want to define a set of dependencies that are shared between multiple graphs."}),"\n",(0,r.jsxs)(n.p,{children:["In the example below we declared an abstract graph called ",(0,r.jsx)(n.code,{children:"ScreenGraph"}),". This graph provides a single dependency called ",(0,r.jsx)(n.code,{children:"screenLogger"})," which is used to log messages from the screen. We want to show the name of the screen in the log messages, so the ",(0,r.jsx)(n.code,{children:"ScreenLogger"})," requires the name of the screen as a constructor argument."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"screenName"})," provider method is marked as ",(0,r.jsx)(n.code,{children:"abstract"})," which means that it must be implemented by the parent class. This allows us to create multiple graphs that extend the ",(0,r.jsx)(n.code,{children:"ScreenGraph"})," and provide the screen name."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="AbstractGraph.ts"',children:"import {graph, ObjectGraph, provides} from 'react-obsidian';\n\nexport abstract class ScreenGraph extends ObjectGraph {\n  @provides()\n  screenLogger(screenName: string) {\n    return new ScreenLogger(screenName);\n  }\n\n  // highlight-next-line\n  abstract screenName(): string; // This method must be implemented by the parent graphs\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The following two graphs extend the base ",(0,r.jsx)(n.code,{children:"ScreenGraph"}),". Each graph provides a different screen name and a service that is specific to that screen."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"HomeGraph",label:"HomeGraph",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="HomeGraph.ts"',children:"import {graph, ObjectGraph, provides} from 'react-obsidian';\n\n@graph()\nexport class HomeGraph extends ScreenGraph {\n  @provides()\n  override screenName() {\n    return 'HomeScreen';\n  }\n\n  @provides()\n  homeService(screenLogger: ScreenLogger): HomeService {\n    return new HomeService(screenLogger);\n  }\n}\n"})})}),(0,r.jsx)(i.A,{value:"ProfileGraph",label:"ProfileGraph",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="ProfileGraph.ts"',children:"import {graph, ObjectGraph, provides} from 'react-obsidian';\n\n@graph()\nexport class ProfileGraph extends ScreenGraph {\n  @provides()\n  override screenName() {\n    return 'ProfileScreen';\n  }\n\n  @provides()\n  profileService(screenLogger: ScreenLogger): ProfileService {\n    return new ProfileService(screenLogger);\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Because abstract graphs aren't instantiated directly, they don't need to be annotated with the ",(0,r.jsx)(n.code,{children:"@graph"})," decorator. Abstract providers aren't annotated with the ",(0,r.jsx)(n.code,{children:"@provides"})," decorator for the same reason."]})}),"\n",(0,r.jsx)(n.h2,{id:"typed-dependencies",children:"Typed dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"DependenciesOf"})," utility type creates a new type consisting the dependencies provided by a graph. This type can be used to type the dependencies of hooks or props required by components. This utility type takes two arguments: the graph and a union of the keys of the dependencies we want to inject."]}),"\n",(0,r.jsxs)(n.p,{children:["In this example we create a type called ",(0,r.jsx)(n.code,{children:"ApplicationDependencies"})," which contains the dependencies ",(0,r.jsx)(n.code,{children:"httpClient"})," and ",(0,r.jsx)(n.code,{children:"databaseService"})," from the ",(0,r.jsx)(n.code,{children:"ApplicationGraph"})," graph."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// {httpClient: HttpClient, databaseService: DatabaseService}\ntype Dependencies = DependenciesOf<ApplicationGraph, 'httpClient' | 'databaseService'>;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In cases where a graph has subgraphs, we can pass an array of graphs to the ",(0,r.jsx)(n.code,{children:"DependenciesOf"})," utility type to create a type that contains the dependencies from all the graphs. Using the ",(0,r.jsx)(n.code,{children:"LoginGraph"})," from the example above, we create a type that contains dependencies from both the ",(0,r.jsx)(n.code,{children:"LoginGraph"})," and the ",(0,r.jsx)(n.code,{children:"ApplicationGraph"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// {httpClient: HttpClient, loginService: LoginService}\ntype Dependencies = DependenciesOf<[LoginGraph, ApplicationGraph], 'httpClient' | 'loginService'>;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(4041);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);