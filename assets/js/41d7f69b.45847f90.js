"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5147],{3905:(e,r,t)=>{t.d(r,{Zo:()=>b,kt:()=>v});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=n.createContext({}),u=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},b=function(e){var r=u(e.components);return n.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),c=u(t),v=s,m=c["".concat(i,".").concat(v)]||c[v]||p[v]||a;return t?n.createElement(m,o(o({ref:r},b),{},{components:t})):n.createElement(m,o({ref:r},b))}));function v(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},340:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=t(7462),s=(t(7294),t(3905));const a={sidebar_position:4,title:"useObservers"},o=void 0,l={unversionedId:"reference/useObservers",id:"reference/useObservers",title:"useObservers",description:"useObservers is a Hook that allows you to react to changes in multiple observables in a single statement.",source:"@site/docs/reference/useObservers.mdx",sourceDirName:"reference",slug:"/reference/useObservers",permalink:"/obsidian/docs/reference/useObservers",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/useObservers.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"useObservers"},sidebar:"reference",previous:{title:"useObserver",permalink:"/obsidian/docs/reference/useObserver"},next:{title:"Model",permalink:"/obsidian/docs/reference/model"}},i={},u=[{value:"Reference",id:"reference",level:2},{value:"useObservers(observables)",id:"useobserversobservables",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Caveats",id:"caveats",level:4},{value:"Usage",id:"usage",level:2},{value:"Observing multiple state properties",id:"observing-multiple-state-properties",level:3}],b={toc:u};function p(e){let{components:r,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},b,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"useObservers")," ",(0,s.kt)("strong",{parentName:"p"},"is a Hook that allows you to react to changes in multiple observables in a single statement.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const {foo, bar} = useObservers({foo: fooObservable, bar: barObservable});\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#reference"},"Reference"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#useobserversobservables"},"useObservers(observables)")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#usage"},"Usage"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#observing-multiple-observables"},"Observing multiple Observables"))))),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"reference"},"Reference"),(0,s.kt)("h3",{id:"useobserversobservables"},"useObservers(observables)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { useObserver } from 'react-obsidian';\n\nconst foo = new Observable(0);\nconst bar = new Observable(true);\n\nconst useHook = () => {\n  const {foo, bar} = useObservers({foo, bar});\n  return {\n    foo,\n    bar,\n  };\n}\n")),(0,s.kt)("h4",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,"A map of observables to subscribe to."),(0,s.kt)("h4",{id:"returns"},"Returns"),(0,s.kt)("p",null,"An object containing the current values of the observables."),(0,s.kt)("h4",{id:"caveats"},"Caveats"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"useObservables")," hook is useful in cases where you need to read the values of multiple observables. If you need to update observables, you might want to use the ",(0,s.kt)("a",{parentName:"li",href:"./useObserver"},(0,s.kt)("inlineCode",{parentName:"a"},"useObserver"))," hook instead as it provides a more convenient API for updating observables.")),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("h3",{id:"observing-multiple-state-properties"},"Observing multiple state properties"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"useObservers")," hook is useful in cases where you need to react to changes of multiple observables. This is commonly used when observing state properties. Instead of observing each property individually, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"useObservers")," hook to observe all of them in a single statement. This can make your code more readable and easy to understand."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { useObservers } from 'react-obsidian';\n\ntype State = {\n  foo: Observable<number>;\n  bar: Observable<boolean>;\n};\n\nconst useHook = ({state}: {state: State}) => {\n  const {foo, bar} = useObservers({\n    foo: state.foo,\n    bar: state.bar\n  });\n  \n  return {\n    foo,\n    bar,\n  };\n}\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you find the ",(0,s.kt)("inlineCode",{parentName:"p"},"useObservers")," API too verbose, consider having your state extend the ",(0,s.kt)("a",{parentName:"p",href:"/obsidian/docs/reference/model"},"Model")," class. It provides a lean abstraction for observing state properties.")))}p.isMDXComponent=!0}}]);