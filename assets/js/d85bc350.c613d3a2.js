"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5615],{1184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(4041);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},7103:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"reference/observable","title":"Observable","description":"Observable is a class that represents a stream of values. It is similar to Promise in that it is a container for a value that will be available in the future. However, unlike Promise, Observable can emit multiple values over time.","source":"@site/docs/reference/observable.mdx","sourceDirName":"reference","slug":"/reference/observable","permalink":"/obsidian/docs/reference/observable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/observable.mdx","tags":[{"inline":true,"label":"Observable","permalink":"/obsidian/docs/tags/observable"},{"inline":true,"label":"Reactivity","permalink":"/obsidian/docs/tags/reactivity"}],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Observable","tags":["Observable","Reactivity"]},"sidebar":"reference","previous":{"title":"Obsidian","permalink":"/obsidian/docs/reference/obsidian"},"next":{"title":"MediatorObservable","permalink":"/obsidian/docs/reference/mediatorObservable"}}');var r=s(1085),l=s(1184);const t={sidebar_position:2,title:"Observable",tags:["Observable","Reactivity"]},a=void 0,c={},o=[{value:"Reference",id:"reference",level:3},{value:"new Observable(initialValue?)",id:"new-observableinitialvalue",level:4},{value:"Arguments",id:"arguments",level:4},{value:"Caveats",id:"caveats",level:4},{value:"subscribe(onNext)",id:"subscribeonnext",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns",level:4},{value:"unsubscribe(onNext)",id:"unsubscribeonnext",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"set value",id:"set-value",level:3},{value:"get value",id:"get-value",level:3},{value:"async first&lt;T&gt;(): Promise&lt;T&gt;",id:"async-firstt-promiset",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Usage",id:"usage",level:2},{value:"Conditional rendering of a component",id:"conditional-rendering-of-a-component",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Observable"})," ",(0,r.jsx)(n.strong,{children:"is a class that represents a stream of values. It is similar to"})," ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsxs)(n.strong,{children:["in that it is a container for a value that will be available in the future. However, unlike ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Promise"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Observable"})})," can emit multiple values over time."]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const isLoggedIn = new Observable(false);\nisLoggedIn.subscribe((nextValue: boolean) => {\n  if (nextValue) {\n    console.log('User is logged in');\n  } else {\n    console.log('User is logged out');\n  }\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#reference",children:"Reference"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#new-observableinitialvalue",children:"new Observable(initialValue?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#subscribeonnext",children:"subscribe(onNext)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#unsubscribeonnext",children:"unsubscribe(onNext)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#set-value",children:"set value"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#get-value",children:"get value"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#async-firstt-promiset",children:"async first<T>(): Promise<T&#62"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#usage",children:"Usage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#conditional-rendering-of-a-component",children:"Conditional rendering of a component"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.h4,{id:"new-observableinitialvalue",children:"new Observable(initialValue?)"}),"\n",(0,r.jsxs)(n.p,{children:["Creates a new ",(0,r.jsx)(n.code,{children:"Observable"})," instance with an optional initial value."]}),"\n",(0,r.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"initialValue?"})," - The initial value of the ",(0,r.jsx)(n.code,{children:"Observable"}),". Defaults to ",(0,r.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"caveats",children:"Caveats"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["It's possible to instantiate an ",(0,r.jsx)(n.code,{children:"Observable"})," without an initial value, but it's not recommended, as its value will be ",(0,r.jsx)(n.code,{children:"undefined"})," until it's set for the first time which can lead to unexpected behavior."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"subscribeonnext",children:"subscribe(onNext)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"subscribe"})," method is used to listen for changes to the ",(0,r.jsx)(n.code,{children:"Observable"}),"'s value. It returns a function that can be used to unsubscribe from the ",(0,r.jsx)(n.code,{children:"Observable"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onNext"})," - A function that will be called whenever the ",(0,r.jsx)(n.code,{children:"Observable"}),"'s value changes. It receives the new value as an argument."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unsubscribe"})," - A function that can be used to unsubscribe from the ",(0,r.jsx)(n.code,{children:"Observable"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"unsubscribeonnext",children:"unsubscribe(onNext)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"unsubscribe"})," method is used to unsubscribe from the ",(0,r.jsx)(n.code,{children:"Observable"})," a specific ",(0,r.jsx)(n.code,{children:"onNext"})," callback."]}),"\n",(0,r.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onNext"})," - The ",(0,r.jsx)(n.code,{children:"onNext"})," callback to unsubscribe."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"set-value",children:"set value"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"value"})," property is used to set the ",(0,r.jsx)(n.code,{children:"Observable"}),"'s value. Changing the value will trigger all subscribers and will trigger a rerender if the ",(0,r.jsx)(n.code,{children:"Observable"})," is used in a Component or a Hook."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-value",children:"get value"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"value"})," property is used to get the ",(0,r.jsx)(n.code,{children:"Observable"}),"'s current value."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"async-firstt-promiset",children:"async first<T>(): Promise<T>"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"first"})," method is used to get the ",(0,r.jsx)(n.code,{children:"Observable"}),"'s first value. If the ",(0,r.jsx)(n.code,{children:"Observable"})," has no value, it will wait for the first value to be set and return it."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Promise"})," - A ",(0,r.jsx)(n.code,{children:"Promise"})," that resolves to the ",(0,r.jsx)(n.code,{children:"Observable"}),"'s current value if it has one, or waits for the first value to be set and resolves to it."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"conditional-rendering-of-a-component",children:"Conditional rendering of a component"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"./mediatorObservable#conditional-rendering-of-a-component",children:"Conditional rendering of a component"})," for a detailed explanation of this example."]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);